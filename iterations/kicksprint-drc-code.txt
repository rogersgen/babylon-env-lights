<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

        <title>Babylon.js sample code</title>

        <!-- Babylon.js -->
        <script src="https://code.jquery.com/pep/0.4.2/pep.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js"></script>
        <script src="https://preview.babylonjs.com/ammo.js"></script>
        <script src="https://preview.babylonjs.com/cannon.js"></script>
        <script src="https://preview.babylonjs.com/Oimo.js"></script>
       
        <script src="https://preview.babylonjs.com/earcut.min.js"></script>
        <script src="https://preview.babylonjs.com/babylon.js"></script>
        <script src="https://preview.babylonjs.com/inspector/babylon.inspector.bundle.js"></script>
        <script src="https://preview.babylonjs.com/materialsLibrary/babylonjs.materials.min.js"></script>
        <script src="https://preview.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js"></script>
        <script src="https://preview.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js"></script>
        <script src="https://preview.babylonjs.com/loaders/babylonjs.loaders.js"></script>
        <script src="https://preview.babylonjs.com/serializers/babylonjs.serializers.min.js"></script>
        <script src="https://preview.babylonjs.com/gui/babylon.gui.min.js"></script>

        <style>
            html, body {
                overflow: hidden;
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
            }

            #renderCanvas {
                width: 100%;
                height: 100%;
                touch-action: none;
            }
        </style>
    </head>
<body>
    <canvas id="renderCanvas"></canvas>
    <script>
        var canvas = document.getElementById("renderCanvas");

        var delayCreateScene = function () {
            var scene = new BABYLON.Scene(engine);
            scene.useRightHandedSystem = true;



            //----------------------------------------------------------------------------------------------------------------
            // Setting up the envirnoment without background
            var hdrTexture = BABYLON.CubeTexture.CreateFromPrefilteredData("environment-quarter.env", scene);
            scene.imageProcessingConfiguration.exposure = 1;
            scene.imageProcessingConfiguration.contrast = 1;
        
            // Skybox
            var hdrSkybox = BABYLON.Mesh.CreateBox("hdrSkyBox", 1000.0, scene);
            var hdrSkyboxMaterial = new BABYLON.PBRMaterial("skyBox", scene);
            hdrSkyboxMaterial.backFaceCulling = true;
            hdrSkyboxMaterial.reflectionTexture = hdrTexture.clone();
            hdrSkyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
            hdrSkyboxMaterial.microSurface = 1.0;
            hdrSkyboxMaterial.disableLighting = false;
            hdrSkybox.material = hdrSkyboxMaterial;
            hdrSkybox.infiniteDistance = true;
            scene.clearColor = new BABYLON.Color3.White();




            //----------------------------------------------------------------------------------------------------------------
            // The mess that is draco
            BABYLON.DracoCompression.Configuration = {
                decoder: {
                    wasmUrl: "https://cdn.jsdelivr.net/gh/google/draco/javascript/draco_decoder.js",
                    wasmBinaryUrl: "https://cdn.jsdelivr.net/gh/google/draco/javascript/draco_decoder.wasm",
                    fallbackUrl: "https://cdn.jsdelivr.net/gh/google/draco/javascript/draco_wasm_wrapper.js",
                }
            };
        
            //--------------------------------------------------------------------------------
            //Loading in first mesh
            BABYLON.Tools.LoadFile("cleat-plate.drc", async function (data) {
                var dracoCompression = new BABYLON.DracoCompression();
    
                var vertexData = await dracoCompression.decodeMeshAsync(data);
                var mesh = new BABYLON.Mesh("dracoMesh", scene);
                var geometry = new BABYLON.Geometry("dracoGeometry", scene, vertexData, undefined, mesh);
        
                var metal = new BABYLON.PBRMaterial("metal", scene);
                metal.reflectionTexture = hdrTexture;
                metal.microSurface = 0.96;
                metal.reflectivityColor = new BABYLON.Color3(0.85, 0.85, 0.85);
                metal.albedoColor = new BABYLON.Color3(0.01, 0.01, 0.01);
                metal.forceIrradianceInFragment = true;
               

                mesh.material = metal;
                mesh.material.sideOrientation = BABYLON.Material.CounterClockWiseSideOrientation;
        
            }, undefined, undefined, true);


            //--------------------------------------------------------------------------------
            //Loading in second mesh
            BABYLON.Tools.LoadFile("shoe-main.drc", async function (data) {
                var dracoCompression = new BABYLON.DracoCompression();
        
                var vertexData = await dracoCompression.decodeMeshAsync(data);
                var mesh = new BABYLON.Mesh("dracoMesh", scene);
                var geometry = new BABYLON.Geometry("dracoGeometry", scene, vertexData, undefined, mesh);
        
                var plastic = new BABYLON.PBRMaterial("plastic", scene);
                plastic.reflectionTexture = hdrTexture;
                plastic.environmentIntensity =1;
                plastic.microSurface = 0.96;
                plastic.albedoColor = new BABYLON.Color3(1, 1, 1);
                plastic.reflectivityColor = new BABYLON.Color3(0.003, 0.003, 0.003); 
                plastic.metallic = 0.0; 
                plastic.roughness = 0.5; 
                plastic.useRoughnessFromMetallicTextureAlpha = true;
                plastic.useRoughnessFromMetallicTextureGreen = true;
                plastic.useMetallnessFromMetallicTextureBlue = true;
                plastic.forceIrradianceInFragment = true;
               

                mesh.material = plastic;
                mesh.material.sideOrientation = BABYLON.Material.CounterClockWiseSideOrientation;
        
            }, undefined, undefined, true);
        
            var camera = new BABYLON.ArcRotateCamera("Camera", Math.PI/3, Math.PI / 4, 40, new BABYLON.Vector3(0,7,0), scene);
                    camera.attachControl(canvas, true);
        
            return scene;
        };
__createScene = delayCreateScene;
        
        var engine = new BABYLON.Engine(canvas, true, { preserveDrawingBuffer: true, stencil: true });
        var scene = delayCreateScene();

        engine.runRenderLoop(function () {
            if (scene) {
                scene.render();
            }
        });

        // Resize
        window.addEventListener("resize", function () {
            engine.resize();
        });
    </script>
</body>
</html>
